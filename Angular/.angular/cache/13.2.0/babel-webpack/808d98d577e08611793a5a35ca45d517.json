{"ast":null,"code":"import * as CONFIG from './../config/config';\nimport { Player } from '../models/player-model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/';\nexport let GameService = /*#__PURE__*/(() => {\n  class GameService {\n    constructor(http) {\n      this.http = http;\n      this.score = 0;\n      this.data = new Player();\n      this.width = CONFIG.playGroundWidth;\n      this.height = CONFIG.playGroundHeight;\n      this.frameNumber = CONFIG.frameNumber;\n      this.player = {\n        x: CONFIG.playGroundWidth / 2 - CONFIG.playerAirplane.width,\n        y: CONFIG.playGroundHeight - (CONFIG.playerAirplane.height + CONFIG.playerAirplane.height / 2)\n      };\n      this.obstacles = [];\n      this.image = null;\n      this.gameLoop = null;\n      this.moveUP = false;\n      this.moveDown = false;\n      this.moveLeft = false;\n      this.moveRight = false;\n    }\n\n    loadAssets(canvasElement) {\n      this.context = canvasElement.getContext('2d');\n      canvasElement.width = this.width;\n      canvasElement.height = this.height;\n      return new Promise((resolve, reject) => {\n        this.image = new Image();\n        this.image.src = CONFIG.spritePath;\n        this.image.width = 58;\n        this.image.height = 128;\n\n        this.image.onload = () => {\n          resolve();\n        };\n      });\n    }\n\n    startGameLoop() {\n      this.gameLoop = setInterval(() => {\n        this.setScore();\n        this.suffleProperties();\n        this.cleanGround();\n        this.createObstacles();\n        this.moveObstacles();\n        this.createPlayer();\n      }, 10);\n    }\n\n    animationFrame(n) {\n      if (this.frameNumber / n % 1 === 0) {\n        return true;\n      }\n\n      return false;\n    }\n\n    suffleProperties() {\n      this.frameNumber += 1;\n    }\n\n    createObstacles() {\n      if (this.frameNumber === 1 || this.animationFrame(100)) {\n        if (this.obstacles.length > 20) {\n          this.obstacles.splice(0, 5);\n        }\n\n        this.getSingleObstacle();\n      }\n    }\n\n    getSingleObstacle() {\n      const context = this.context;\n      const image = this.image;\n      const randomVehicle = CONFIG.airplanesRight[Math.floor(Math.random() * CONFIG.airplanesRight.length)];\n      this.obstacles.push(new function () {\n        this.y = Math.floor(Math.random() * 450) + 0, this.x = Math.floor(window.innerWidth), this.width = randomVehicle.width;\n        this.height = randomVehicle.height;\n\n        this.update = () => {\n          context.drawImage(image, randomVehicle.sX, randomVehicle.sY, randomVehicle.sWidth, randomVehicle.sHeight, this.x, this.y, randomVehicle.width, randomVehicle.height);\n        };\n      }());\n    }\n\n    moveObstacles() {\n      this.obstacles.forEach((element, index) => {\n        element.x -= 3;\n        element.update();\n        this.detectCrash(element);\n\n        if (element.x > this.width) {\n          this.obstacles.splice(index, 1);\n        }\n      });\n    }\n\n    createPlayer() {\n      if (this.moveUP) {\n        if (this.player.y === 0) {\n          this.player.y = 0;\n        } else {\n          this.player.y -= CONFIG.playerAirplaneSpeed;\n        }\n      } else if (this.moveDown) {\n        if (this.player.y + CONFIG.playerAirplane.height === CONFIG.playGroundHeight || this.player.y + CONFIG.playerAirplane.height > CONFIG.playGroundHeight) {\n          this.player.y = CONFIG.playGroundHeight - CONFIG.playerAirplane.height;\n        } else {\n          this.player.y += CONFIG.playerAirplaneSpeed;\n        }\n      } else if (this.moveLeft) {\n        if (this.player.x === 0 || this.player.x < 0) {\n          this.player.x = 0;\n        } else {\n          this.player.x -= CONFIG.playerAirplaneSpeed;\n        }\n      } else if (this.moveRight) {\n        if (this.player.x + CONFIG.playerAirplane.sWidth === CONFIG.playGroundWidth || this.player.x + CONFIG.playerAirplane.sWidth > CONFIG.playGroundWidth) {\n          this.player.x = CONFIG.playGroundWidth - CONFIG.playerAirplane.width;\n        } else {\n          this.player.x += CONFIG.playerAirplaneSpeed;\n        }\n      }\n\n      this.context.drawImage(this.image, CONFIG.playerAirplane.sX, CONFIG.playerAirplane.sY, CONFIG.playerAirplane.sWidth, CONFIG.playerAirplane.sHeight, this.player.x, this.player.y, CONFIG.playerAirplane.width, CONFIG.playerAirplane.height);\n    }\n\n    detectCrash(obstacle) {\n      const componentLeftSide = obstacle.x;\n      const componentRightSide = obstacle.x + obstacle.width;\n      const componentTop = obstacle.y;\n      const componentBottom = obstacle.y + obstacle.height;\n      const carRightSide = this.player.x + CONFIG.playerAirplane.width;\n      const carLeftSide = this.player.x;\n      const carTop = this.player.y;\n      const carBottom = this.player.y + CONFIG.playerAirplane.height;\n\n      if (carRightSide > componentLeftSide && carTop < componentBottom && carLeftSide < componentRightSide && carTop < componentBottom && carRightSide > componentLeftSide && carBottom > componentTop && carLeftSide < componentRightSide && carBottom > componentTop) {\n        clearInterval(this.gameLoop);\n        this.data.nickname = this.nickname;\n        this.data.score = this.score;\n        this.create(this.data).subscribe();\n        this.playAgain();\n      }\n    }\n\n    cleanGround() {\n      this.context.clearRect(0, 0, CONFIG.playGroundWidth, CONFIG.playGroundHeight);\n    }\n\n    playAgain() {\n      confirm('Game Over ' + this.nickname + ' your score is ' + this.score);\n      window.location.href = 'https://antonindisperati.fr/#/gamemenu';\n    }\n\n    getAll() {\n      return this.http.get(baseUrl + 'api/player');\n    }\n\n    get(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n\n    create(data) {\n      console.log(data);\n      return this.http.post(baseUrl + 'api/player', data);\n    }\n\n    setScore() {\n      // this.score = setInterval(() => {\n      //   this.score = this.score +1;\n      //   return this.score},\n      //   200\n      //   );\n      this.score = this.score + 1;\n    }\n\n  }\n\n  GameService.ɵfac = function GameService_Factory(t) {\n    return new (t || GameService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameService,\n    factory: GameService.ɵfac\n  });\n  return GameService;\n})();","map":null,"metadata":{},"sourceType":"module"}